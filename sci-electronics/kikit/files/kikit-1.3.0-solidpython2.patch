--- a/kikit/stencil.py	2023-02-26 03:13:24.000000000 -0800
+++ a/kikit/stencil.py	2023-03-15 15:40:08.599292900 -0700
@@ -8,8 +8,8 @@
 from kikit.substrate import Substrate, extractRings, toShapely, linestringToKicad
 from kikit.export import gerberImpl, pasteDxfExport
 from kikit.export import exportSettingsJlcpcb
-import solid
-import solid.utils
+import solid2 as solid
+import solid2_legacy as solid_utils
 import subprocess
 import shutil
 from kikit.common import removeComponents, parseReferences
@@ -35,9 +35,9 @@
     corner.SetStart(VECTOR2I(start[0], start[1]))
 
     if np.cross(start - center, end - center) > 0:
-        corner.SetArcAngleAndEnd(fromDegrees(90), True)
+        corner.SetArcAngleAndEnd(1.5707963267948966, True)
     else:
-        corner.SetArcAngleAndEnd(fromDegrees(-90), True)
+        corner.SetArcAngleAndEnd(4.7123889803846898, True)
     corner.SetWidth(thickness)
     corner.SetLayer(Layer.F_Paste)
     board.Add(corner)
@@ -210,7 +210,7 @@
     sink = solid.cylinder(d1=0, d2=HEAD_DIA, h=sinkH)
     sinkE = solid.cylinder(d=HEAD_DIA, h=SINK_EXTRA)
     hole = solid.cylinder(h=HOLE_LEN, d=fromMm(2))
-    return sinkE + solid.utils.down(sinkH)(sink) + solid.utils.down(HOLE_LEN)(hole)
+    return sinkE + solid_utils.down(sinkH)(sink) + solid_utils.down(HOLE_LEN)(hole)
 
 def mirrorX(linestring, origin):
     return [(2 * origin - x, y) for x, y in linestring]
@@ -233,12 +233,12 @@
     innerRing = createOffsetPolygon(board, - innerBorder).exterior.coords
     if topSide:
         innerRing = mirrorX(innerRing, centerpoint[0])
-    innerCutout = solid.utils.down(jigThickness)(
+    innerCutout = solid_utils.down(jigThickness)(
         solid.linear_extrude(height=3 * jigThickness, convexity=10)(solid.polygon(innerRing)))
     registerRing = createOffsetPolygon(board, tolerance).exterior.coords
     if topSide:
         registerRing = mirrorX(registerRing, centerpoint[0])
-    registerCutout = solid.utils.up(jigThickness - pcbThickness)(
+    registerCutout = solid_utils.up(jigThickness - pcbThickness)(
         solid.linear_extrude(height=jigThickness, convexity=10)(solid.polygon(registerRing)))
 
     register = body - innerCutout - registerCutout
@@ -392,11 +392,11 @@
     renderScad(bottomRegisterFile, os.path.join(outputdir, "bottomRegister.stl"))
 
 def printedStencilSubstrate(outlineDxf, thickness, frameHeight, frameWidth, frameClearance):
-    bodyOffset = solid.utils.up(0) if frameWidth + frameClearance == 0 else solid.offset(r=frameWidth + frameClearance)
+    bodyOffset = solid_utils.up(0) if frameWidth + frameClearance == 0 else solid.offset(r=frameWidth + frameClearance)
     body = solid.linear_extrude(height=thickness + frameHeight)(
         bodyOffset(solid.import_dxf(outlineDxf)))
-    boardOffset = solid.utils.up(0) if frameClearance == 0 else solid.offset(r=frameClearance)
-    board = solid.utils.up(thickness)(
+    boardOffset = solid_utils.up(0) if frameClearance == 0 else solid.offset(r=frameClearance)
+    board = solid_utils.up(thickness)(
         solid.linear_extrude(height=thickness + frameHeight)(
             boardOffset(solid.import_dxf(outlineDxf))))
     return body - board
@@ -432,7 +432,7 @@
     xRotate = 180 if front else 0
     substrate = solid.scale([1, 1, zScale])(printedStencilSubstrate(outlineDxf,
         thickness, frameHeight, frameWidth, frameClearance))
-    holesOffset = solid.utils.up(0) if enlargeHoles == 0 else solid.offset(delta=enlargeHoles)
+    holesOffset = solid_utils.up(0) if enlargeHoles == 0 else solid.offset(delta=enlargeHoles)
     holes = solid.linear_extrude(height=4*thickness, center=True)(
         holesOffset(solid.import_dxf(holesDxf)))
     substrate -= holes
