diff -ur SolidPython-1.1.2/pyproject.toml SolidPython-1.1.2/pyproject.toml
--- SolidPython-1.1.2/pyproject.toml	2022-01-03 07:45:46.000000000 -0800
+++ SolidPython-1.1.2/pyproject.toml	2022-01-28 18:40:46.975658261 -0800
@@ -34,7 +34,7 @@
 
 [tool.poetry.dependencies]
 python = ">=3.7"
-euclid3 = "^0.1.0"
+euclid = "^0.1.0"
 pypng = "^0.0.19"
 PrettyTable = "=0.7.2"
 ply = "^3.11"
diff -ur SolidPython-1.1.2/README.rst SolidPython-1.1.2/README.rst
--- SolidPython-1.1.2/README.rst	2022-01-03 07:45:46.000000000 -0800
+++ SolidPython-1.1.2/README.rst	2022-01-28 18:40:46.974658266 -0800
@@ -421,7 +421,7 @@
 
     from solid import translate
     from solid.splines import catmull_rom_polygon, bezier_polygon
-    from euclid3 import Point2
+    from euclid import Point2
 
     points = [ Point2(0,0), Point2(1,1), Point2(2,1), Point2(2,-1) ]  
     shape = catmull_rom_polygon(points, show_controls=True)
diff -ur SolidPython-1.1.2/solid/examples/koch.py SolidPython-1.1.2/solid/examples/koch.py
--- SolidPython-1.1.2/solid/examples/koch.py	2022-01-03 07:45:46.000000000 -0800
+++ SolidPython-1.1.2/solid/examples/koch.py	2022-01-28 18:40:46.970658282 -0800
@@ -2,7 +2,7 @@
 import sys
 from pathlib import Path
 
-from euclid3 import LineSegment2, LineSegment3, Point2, Point3
+from euclid import LineSegment2, LineSegment3, Point2, Point3
 
 from solid import scad_render_to_file
 from solid.objects import polygon, polyhedron, union
diff -ur SolidPython-1.1.2/solid/examples/path_extrude_example.py SolidPython-1.1.2/solid/examples/path_extrude_example.py
--- SolidPython-1.1.2/solid/examples/path_extrude_example.py	2022-01-03 07:45:46.000000000 -0800
+++ SolidPython-1.1.2/solid/examples/path_extrude_example.py	2022-01-28 18:40:46.962658316 -0800
@@ -5,7 +5,7 @@
 from math import cos, radians, sin, pi, tau
 from pathlib import Path
 
-from euclid3 import Point2, Point3, Vector3
+from euclid import Point2, Point3, Vector3
 
 from solid import scad_render_to_file, text, translate, cube, color, rotate
 from solid.utils import UP_VEC, Vector23, distribute_in_grid, extrude_along_path
diff -ur SolidPython-1.1.2/solid/examples/splines_example.py SolidPython-1.1.2/solid/examples/splines_example.py
--- SolidPython-1.1.2/solid/examples/splines_example.py	2022-01-03 07:45:46.000000000 -0800
+++ SolidPython-1.1.2/solid/examples/splines_example.py	2022-01-28 18:40:46.961658321 -0800
@@ -6,7 +6,7 @@
 
 from solid.splines import catmull_rom_points, catmull_rom_polygon, control_points
 from solid.splines import bezier_polygon, bezier_points
-from euclid3 import Vector2, Vector3, Point2, Point3
+from euclid import Vector2, Vector3, Point2, Point3
 
 def assembly():
     # Catmull-Rom Splines
diff -ur SolidPython-1.1.2/solid/extrude_along_path.py SolidPython-1.1.2/solid/extrude_along_path.py
--- SolidPython-1.1.2/solid/extrude_along_path.py	2022-01-03 07:45:46.000000000 -0800
+++ SolidPython-1.1.2/solid/extrude_along_path.py	2022-01-28 18:40:46.972658274 -0800
@@ -2,7 +2,7 @@
 from math import radians
 from solid import OpenSCADObject, Points, Indexes, ScadSize, polyhedron
 from solid.utils import euclidify, euc_to_arr, transform_to_point, centroid
-from euclid3 import Point2, Point3, Vector2, Vector3
+from euclid import Point2, Point3, Vector2, Vector3
 
 from typing import Dict, Optional, Sequence, Tuple, Union, List, Callable
 
diff -ur SolidPython-1.1.2/solid/patch_euclid.py SolidPython-1.1.2/solid/patch_euclid.py
--- SolidPython-1.1.2/solid/patch_euclid.py	2022-01-03 07:45:46.000000000 -0800
+++ SolidPython-1.1.2/solid/patch_euclid.py	2022-01-28 18:40:46.973658270 -0800
@@ -1,5 +1,5 @@
-import euclid3
-from euclid3 import Vector3, Vector2, Line3
+import euclid
+from euclid import Vector3, Vector2, Line3
 
 # NOTE: The PyEuclid on PyPi doesn't include several elements added to
 # the module as of 13 Feb 2013.  Add them here until euclid supports them
@@ -33,7 +33,7 @@
     # Connect A & B
     # If the length of the connecting segment  is 0, they intersect
     # at the endpoint(s) of the connecting segment
-    sol = euclid3._connect_line3_line3(A, B)
+    sol = euclid._connect_line3_line3(A, B)
     # TODO: Ray3 and LineSegment3 would like to be able to know
     # if their intersection points fall within the segment.
     if sol.magnitude_squared() < 0.001:
diff -ur SolidPython-1.1.2/solid/screw_thread.py SolidPython-1.1.2/solid/screw_thread.py
--- SolidPython-1.1.2/solid/screw_thread.py	2022-01-03 07:45:46.000000000 -0800
+++ SolidPython-1.1.2/solid/screw_thread.py	2022-01-28 18:40:46.972658274 -0800
@@ -2,7 +2,7 @@
 import math
 from typing import Sequence, Tuple, Union
 
-from euclid3 import Point3, Vector3
+from euclid import Point3, Vector3
 
 from solid import scad_render_to_file
 from solid.objects import cylinder, polyhedron, render
diff -ur SolidPython-1.1.2/solid/splines.py SolidPython-1.1.2/solid/splines.py
--- SolidPython-1.1.2/solid/splines.py	2022-01-03 07:45:46.000000000 -0800
+++ SolidPython-1.1.2/solid/splines.py	2022-01-28 18:40:46.973658270 -0800
@@ -3,12 +3,12 @@
 
 from solid import union, circle, cylinder, polygon, color, OpenSCADObject, translate, linear_extrude, polyhedron
 from solid.utils import bounding_box, right, Red, Tuple3, euclidify
-from euclid3 import Vector2, Vector3, Point2, Point3
+from euclid import Vector2, Vector3, Point2, Point3
 
 from typing import Sequence, Tuple, Union, List, cast
 
 Point23 = Union[Point2, Point3]
-# These *Input types accept either euclid3.Point* objects, or bare n-tuples
+# These *Input types accept either euclid.Point* objects, or bare n-tuples
 Point2Input = Union[Point2, Tuple[float, float]]
 Point3Input = Union[Point3, Tuple[float, float, float]]
 Point23Input = Union[Point2Input, Point3Input]
diff -ur SolidPython-1.1.2/solid/test/test_extrude_along_path.py SolidPython-1.1.2/solid/test/test_extrude_along_path.py
--- SolidPython-1.1.2/solid/test/test_extrude_along_path.py	2022-01-03 07:45:46.000000000 -0800
+++ SolidPython-1.1.2/solid/test/test_extrude_along_path.py	2022-01-28 18:40:46.950658367 -0800
@@ -4,7 +4,7 @@
 
 from solid import OpenSCADObject, scad_render
 from solid.utils import extrude_along_path
-from euclid3 import Point2, Point3
+from euclid import Point2, Point3
 
 from typing import Union
 
diff -ur SolidPython-1.1.2/solid/test/test_solidpython.py SolidPython-1.1.2/solid/test/test_solidpython.py
--- SolidPython-1.1.2/solid/test/test_solidpython.py	2022-01-03 07:45:46.000000000 -0800
+++ SolidPython-1.1.2/solid/test/test_solidpython.py	2022-01-28 18:40:46.955658346 -0800
@@ -464,7 +464,7 @@
             pass
 
     def test_custom_iterables(self):
-        from euclid3 import Vector3
+        from euclid import Vector3
 
         class CustomIterable:
             def __iter__(self):
diff -ur SolidPython-1.1.2/solid/test/test_splines.py SolidPython-1.1.2/solid/test/test_splines.py
--- SolidPython-1.1.2/solid/test/test_splines.py	2022-01-03 07:45:46.000000000 -0800
+++ SolidPython-1.1.2/solid/test/test_splines.py	2022-01-28 18:40:46.950658367 -0800
@@ -5,7 +5,7 @@
 from solid import *
 from solid.utils import euclidify
 from solid.splines import catmull_rom_points, catmull_rom_prism, bezier_points, bezier_polygon
-from euclid3 import Point2, Point3, Vector2, Vector3
+from euclid import Point2, Point3, Vector2, Vector3
 from math import pi
 
 SEGMENTS = 8
diff -ur SolidPython-1.1.2/solid/test/test_utils.py SolidPython-1.1.2/solid/test/test_utils.py
--- SolidPython-1.1.2/solid/test/test_utils.py	2022-01-03 07:45:46.000000000 -0800
+++ SolidPython-1.1.2/solid/test/test_utils.py	2022-01-28 18:40:46.952658358 -0800
@@ -3,7 +3,7 @@
 from solid.solidpython import OpenSCADObject, scad_render_to_file
 import unittest
 import re
-from euclid3 import Point3, Vector3, Point2
+from euclid import Point3, Vector3, Point2
 
 from solid import scad_render
 from solid.objects import cube, polygon, sphere, translate
diff -ur SolidPython-1.1.2/solid/utils.py SolidPython-1.1.2/solid/utils.py
--- SolidPython-1.1.2/solid/utils.py	2022-01-03 07:45:46.000000000 -0800
+++ SolidPython-1.1.2/solid/utils.py	2022-01-28 18:40:46.971658278 -0800
@@ -9,8 +9,8 @@
 from solid import OpenSCADObject, P2, P3, P4, Vec3 , Vec4, Vec34, P3s, P23
 from solid import Points, Indexes, ScadSize
 
-from euclid3 import Point2, Point3, Vector2, Vector3, Line2, Line3
-from euclid3 import LineSegment2, LineSegment3, Matrix4
+from euclid import Point2, Point3, Vector2, Vector3, Line2, Line3
+from euclid import LineSegment2, LineSegment3, Matrix4
 run_euclid_patch()
 
 # ==========
@@ -729,13 +729,13 @@
 def euclidify(an_obj:EucOrTuple, intended_class:type=Vector3) -> Union[Point23, Vector23, List[Union[Point23, Vector23]]]:
     '''
     Accept an object or list of objects of any relevant type (2-tuples, 3-tuples, Vector2/3, Point2/3)
-    and return one or more euclid3 objects of intended_class. 
+    and return one or more euclid objects of intended_class. 
 
     # -- 3D input has its z-values dropped when intended_class is 2D
     # -- 2D input has its z-values set to 0 when intended_class is 3D
 
     The general idea is to take in data in whatever form is handy to users
-    and return euclid3 types with vector math capabilities
+    and return euclid types with vector math capabilities
     '''
     sequence = (list, tuple)
     euclidable = (list, tuple, Vector2, Vector3, Point2, Point3)
