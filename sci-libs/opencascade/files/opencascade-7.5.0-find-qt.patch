--- a/adm/cmake/qt.cmake	2020-11-02 08:52:44.000000000 -0800
+++ b/adm/cmake/qt.cmake	2020-12-08 09:19:37.968136813 -0800
@@ -3,28 +3,28 @@
 # Qt is searched manually first (just determine root)
 message (STATUS "Processing Qt 3-rd party")
 
-if (NOT DEFINED ${3RDPARTY_QT_DIR} AND ${3RDPARTY_QT_DIR} STREQUAL "")
-  FIND_PRODUCT_DIR ("${3RDPARTY_DIR}" Qt 3RDPARTY_QT_DIR_NAME)
+#if (NOT DEFINED ${3RDPARTY_QT_DIR} AND ${3RDPARTY_QT_DIR} STREQUAL "")
+#  FIND_PRODUCT_DIR ("${3RDPARTY_DIR}" Qt 3RDPARTY_QT_DIR_NAME)
 
-  if (NOT DEFINED ${3RDPARTY_QT_DIR_NAME} AND ${3RDPARTY_QT_DIR_NAME} STREQUAL "")
-    set (3RDPARTY_QT_DIR "" CACHE PATH "The directory containing qt")
-    message (FATAL_ERROR "Could not find used third-party product: 3RDPARTY_QT_DIR")
-  endif()
+#  if (NOT DEFINED ${3RDPARTY_QT_DIR_NAME} AND ${3RDPARTY_QT_DIR_NAME} STREQUAL "")
+#    set (3RDPARTY_QT_DIR "" CACHE PATH "The directory containing qt")
+#    message (FATAL_ERROR "Could not find used third-party product: 3RDPARTY_QT_DIR")
+#  endif()
 
   # Combine directory name with absolute path and show in GUI
-  set (3RDPARTY_QT_DIR "${3RDPARTY_DIR}/${3RDPARTY_QT_DIR_NAME}" CACHE PATH "The directory containing Qt" FORCE)
-  message (STATUS "Info: Qt is used from folder: ${3RDPARTY_QT_DIR}")
-endif()
+#  set (3RDPARTY_QT_DIR "${3RDPARTY_DIR}/${3RDPARTY_QT_DIR_NAME}" CACHE PATH "The directory containing Qt" FORCE)
+#  message (STATUS "Info: Qt is used from folder: ${3RDPARTY_QT_DIR}")
+#endif()
 
-set (USED_3RDPARTY_QT_DIR "${3RDPARTY_QT_DIR}")
+#set (USED_3RDPARTY_QT_DIR "${3RDPARTY_QT_DIR}")
 
 # Now set CMAKE_PREFIX_PATH to point to local Qt installation.
 # Without this setting find_package() will not work
-set(CMAKE_PREFIX_PATH ${3RDPARTY_QT_DIR})
+#set(CMAKE_PREFIX_PATH ${3RDPARTY_QT_DIR})
 
 # Now we can apply standard CMake finder for Qt5. We do this mostly
 # to have qt5_wrap_cpp() function available and Qt5_FOUND variable filled
-find_package(Qt5 QUIET COMPONENTS Widgets Quick Xml PATHS ${3RDPARTY_QT_DIR} NO_DEFAULT_PATH)
+#find_package(Qt5 QUIET COMPONENTS Widgets Quick Xml PATHS ${3RDPARTY_QT_DIR} NO_DEFAULT_PATH)
 if (NOT ${Qt5_FOUND})
   # Now we can apply standard CMake finder for Qt. We do this mostly
   # to have qt4_wrap_cpp() function available
--- a/adm/cmake/qt_macro.cmake	2020-11-02 08:52:44.000000000 -0800
+++ b/adm/cmake/qt_macro.cmake	2020-12-08 09:19:32.875137361 -0800
@@ -2,9 +2,9 @@
 
 macro (FIND_QT_PACKAGE PROJECT_LIBRARIES_DEBUG PROJECT_LIBRARIES_RELEASE PROJECT_INCLUDES)
 
-  if ("${3RDPARTY_QT_DIR}" STREQUAL "")
-    message (FATAL_ERROR "Empty Qt dir")
-  endif()
+#  if ("${3RDPARTY_QT_DIR}" STREQUAL "")
+#    message (FATAL_ERROR "Empty Qt dir")
+#  endif()
 
   if (${Qt5_FOUND})
     #message (STATUS "Qt5 cmake configuration")
